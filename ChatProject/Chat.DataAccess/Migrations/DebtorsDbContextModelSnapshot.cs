// <auto-generated />
using System;
using System.Reflection.Emit;
using Chats.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chats.DataAccess.Migrations
{
    [DbContext(typeof(DebtorsDbContext))]
    partial class DebtorsDbContextModelSnapshot : ModelSnapshot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Debtors.DataAccess.Entities.AdminEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.ToTable("admins");
            });

            modelBuilder.Entity("Debtors.DataAccess.Entities.ChatEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("Title")
                    .HasColumnType("string");

                b.Property<int>("Description")
                    .HasColumnType("string");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");
            });

            modelBuilder.Entity("Debtors.DataAccess.Entities.UserEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Patronymic")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");


                b.Property<string>("Login")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Birthday")
                    .IsRequired()
                    .HasColumnType("datetime2");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");
            });

            modelBuilder.Entity("Debtors.DataAccess.Entities.JoiningEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("IserId")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("ChatId")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.ToTable("users");

                b.ToTable("chats");
            });

            modelBuilder.Entity("Debtors.DataAccess.Entities.MessagesEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("IserId")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<string>("ChatId")
                    .IsRequired()
                    .HasColumnType("int");

                b.Property<DateTime>("CreationTime")
                    .HasColumnType("datetime2");

                b.Property<Guid>("ExternalId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("ModificationTime")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("ExternalId")
                    .IsUnique();

                b.ToTable("users");

                b.ToTable("chats");
            });



            modelBuilder.Entity("Chat.DataAccess.Entities.ChatEntity", b =>
            {
                b.Navigation("chats");
            });

            modelBuilder.Entity("Chat.DataAccess.Entities.MessageEntity", b =>
            {
                b.HasOne("Chat.DataAccess.Entities.ChatEntity", "Chat")
                    .WithMany("Message")
                    .HasForeignKey("ChatID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
                b.HasOne("Chat.DataAccess.Entities.UserEntity", "User")
                     .WithMany("Message")
                     .HasForeignKey("UserID")
                     .OnDelete(DeleteBehavior.Cascade)
                     .IsRequired();

                b.Navigation("Chat");
                b.Navigation("User");
            });


            modelBuilder.Entity("Chat.DataAccess.Entities.JoiningEntity", b =>
            {
                b.HasOne("Chat.DataAccess.Entities.ChatEntity", "Chat")
                    .WithMany("Message")
                    .HasForeignKey("ChatID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
                b.HasOne("Chat.DataAccess.Entities.UserEntity", "User")
                     .WithMany("Message")
                     .HasForeignKey("UserID")
                     .OnDelete(DeleteBehavior.Cascade)
                     .IsRequired();

                b.Navigation("Chat");
                b.Navigation("User");
            });

            modelBuilder.Entity("Chat.DataAccess.Entities.UserEntity", b =>
            {
                b.Navigation("users");
            });

            modelBuilder.Entity("Chat.DataAccess.Entities.AdminEntity", b =>
            {
                b.Navigation("admins");
            });
#pragma warning restore 612, 618
        }
    }
}
